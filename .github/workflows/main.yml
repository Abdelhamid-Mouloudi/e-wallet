name: CI/CD Pipeline - E-Wallet

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AZURE_WEBAPP_NAME: 'e-wallet'
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:

  # 1. BUILD & UNIT TESTS
  
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14.6-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: ewallet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name:  Build Backend
      run: |
        cd backend
        mvn clean compile

    - name:  Run Backend Unit Tests
      run: |
        cd backend
        mvn test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ewallet_test
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpass
        
    - name: SonarCloud Analysis (Backend)
      run: |
        cd backend
        mvn verify sonar:sonar \
          -Dsonar.projectKey=Abdelhamid-Mouloudi_e-wallet \
          -Dsonar.organization=abdelhamid-mouloudi \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ewallet_test
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpass

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Fix Maven wrapper permissions
      run: chmod +x backend/mvnw

    - name: Resolve Maven dependencies
      run: |
       cd backend
       mvn dependency:resolve

    - name: Snyk test (Backend)
      run: |
       cd backend
       snyk test 
      continue-on-error: true
      env:
       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Snyk monitor (Backend)
      run: |
        cd backend
        snyk monitor
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name:  Run Frontend Unit Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false 

    - name: SonarCloud Analysis (Frontend)
      run: |
       cd frontend
       npm install -g sonarqube-scanner
       sonar-scanner \
         -Dsonar.projectKey=abdelhamid-mouloudi_e-wallet-frontend \
         -Dsonar.organization=abdelhamid-mouloudi \
         -Dsonar.sources=. \
         -Dsonar.host.url=https://sonarcloud.io \
         -Dsonar.token=${{ secrets.SONAR_TOKEN }}

    - name: Install frontend dependencies
      run: |
       cd frontend
       yarn install

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Snyk test (Frontend)
      run: |
        cd frontend
        snyk test
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Snyk monitor (Frontend)
      run: |
        cd frontend
        snyk monitor
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}



    - name:  Build Frontend
      run: |
        cd frontend
        CI=false npm run build 

    - name: Upload Unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          backend/target/surefire-reports/
          frontend/coverage/

  # 2. BUILD & PUSH DOCKER IMAGES
  
  build-images:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.ACR_LOGIN_SERVER }}/e-wallet-backend:latest
          ${{ secrets.ACR_LOGIN_SERVER }}/e-wallet-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name:  Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.ACR_LOGIN_SERVER }}/e-wallet-frontend:latest
          ${{ secrets.ACR_LOGIN_SERVER }}/e-wallet-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

 
  # 3. DEPLOY TO AZURE APP SERVICE

  deploy-to-azure:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name:  Checkout code
      uses: actions/checkout@v4

    - name:  Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name:  Configure PostgreSQL
      run: |
        az postgres flexible-server firewall-rule create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.POSTGRES_SERVER_NAME }} \
          --rule-name AllowAzureServices \
          --start-ip-address 0.0.0.0 \
          --end-ip-address 0.0.0.0

    - name:  Deploy Backend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: '${{ env.AZURE_WEBAPP_NAME }}-backend'
        images: '${{ secrets.ACR_LOGIN_SERVER }}/e-wallet-backend:latest'

    - name:  Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: '${{ env.AZURE_WEBAPP_NAME }}-frontend'
        images: '${{ secrets.ACR_LOGIN_SERVER }}/e-wallet-frontend:latest'

    - name:  Configure App Settings
      run: |
        az webapp config appsettings set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }}-backend \
          --settings \
            SPRING_DATASOURCE_URL="jdbc:postgresql://${{ secrets.POSTGRES_SERVER_NAME }}.postgres.database.azure.com:5432/${{ secrets.DB_NAME }}" \
            SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}" \
            SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            SPRING_PROFILES_ACTIVE="prod"



    - name: Test Prometheus metrics endpoint
      run: |
        curl -f https://e-wallet-backend-fqfsceajb5gab2bm.eastus-01.azurewebsites.net/actuator/prometheus
        

    - name: Push test metric to Grafana Cloud
      run: |
        timestamp=$(date +%s%N)
        cat <<EOF > metric.json
        {
          "streams": [
            {
              "stream": {
                "job": "e-wallet-backend",
                "env": "prod"
              },
              "values": [
                ["$timestamp", "{\"message\": \"deployment_success\"}"]
              ]
            }
          ]
        }
        EOF

        curl -X POST "${{ secrets.GRAFANA_CLOUD_URL }}" \
             -u "${{ secrets.GRAFANA_CLOUD_USERNAME }}:${{ secrets.GRAFANA_CLOUD_API_KEY }}" \
             -H "Content-Type: application/json" \
             --data-binary @metric.json

